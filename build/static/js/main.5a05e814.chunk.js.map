{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","id","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","createBoard","board","_this$props","ncols","nrows","chanceLightStartsOn","y","row","x","push","Math","random","flipCellsAround","coord","_this$props2","state","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","hasWon","reduce","b","concat","filter","item","length","setState","displayBoard","arr","tf","src_Cell_0","key","displayWinner","testBoard","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a05e814.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.id);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: .25,\n    testBoard: [\n      [false, false, true, false, false],\n      [false, true, true, true, false],\n      [false, false, true, false, false],\n      [false, false, false, false, false],\n      [false, false, false, false, false]\n      ]\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = ({\n      hasWon: false,\n      board: this.props.testBoard\n    })\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard = () => {\n    let board = [];\n    let { ncols, nrows, chanceLightStartsOn} = this.props;\n    for (let y=0; y<nrows; y++){\n      let row = [];\n      for (let x=0; x<ncols; x++){\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround = (coord) => {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    \n    flipCell(y, x);\n    flipCell(y-1, x);\n    flipCell(y, x-1);\n    flipCell(y+1, x);\n    flipCell(y, x+1);\n\n    //check if the cells are all dim\n    let cellsLeft = board.reduce( (a, b) => a.concat(b) )\n      .filter( item => item === true );\n    //if so, set hasWon to true\n    let hasWon = cellsLeft.length === 0;\n\n    this.setState({board, hasWon});\n  }\n\n  displayBoard = () => {\n    return(\n      <table className=\"Board\">\n        <tbody>\n          {this.state.board.map((arr, y) => {\n            let row = arr.map((tf, x) => {\n              return (\n                <Cell key={`${y}-${x}`} id={`${y}-${x}`} isLit={tf} flipCellsAroundMe={this.flipCellsAround}/>\n              )\n            });\n            return <tr key={`row${y}`}>{row}</tr>\n          })}\n        </tbody>\n      </table>\n    );\n  }\n\n  displayWinner = () => {\n    return (\n      <h1>You Win!!</h1>\n    )\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return (\n      <div>\n            {!this.state.hasWon ? this.displayBoard() : this.displayWinner()}\n      </div>\n    );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}